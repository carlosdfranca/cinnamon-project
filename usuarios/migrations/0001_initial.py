# Generated by Django 5.2.3 on 2025-08-18 22:58

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('global_role', models.CharField(choices=[('NONE', 'Sem papel global'), ('PLATFORM_ADMIN', 'Admin da Plataforma'), ('PLATFORM_VIEWER', 'Viewer da Plataforma')], default='NONE', help_text='Papel global (plataforma). Admin/Viewer vê todas as empresas.', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Empresa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=255, unique=True)),
                ('cnpj', models.CharField(blank=True, help_text='Opcional. Use 00.000.000/0000-00 ou 14 dígitos.', max_length=18, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='CNPJ deve estar no formato 00.000.000/0000-00 ou apenas 14 dígitos.', regex='^\\d{2}\\.\\d{3}\\.\\d{3}/\\d{4}-\\d{2}$|^\\d{14}$')])),
                ('is_ativo', models.BooleanField(default=True)),
                ('criado_em', models.DateTimeField(auto_now_add=True)),
                ('atualizado_em', models.DateTimeField(auto_now=True)),
                ('master', models.ForeignKey(blank=True, help_text='Usuário Master desta empresa (um por empresa).', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='empresas_como_master', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Empresa',
                'verbose_name_plural': 'Empresas',
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('MASTER', 'Master (administra tudo da empresa)'), ('ADMIN', 'Admin (gerencia usuários/permissões da empresa)'), ('MEMBER', 'Membro (acesso padrão)'), ('VIEWER', 'Somente leitura')], default='MEMBER', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('criado_em', models.DateTimeField(auto_now_add=True)),
                ('atualizado_em', models.DateTimeField(auto_now=True)),
                ('empresa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='usuarios.empresa')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Vínculo de Usuário com Empresa',
                'verbose_name_plural': 'Vínculos de Usuários com Empresas',
            },
        ),
        migrations.AddIndex(
            model_name='empresa',
            index=models.Index(fields=['nome'], name='idx_empresa_nome'),
        ),
        migrations.AddIndex(
            model_name='membership',
            index=models.Index(fields=['empresa', 'role'], name='idx_memb_empresa_role'),
        ),
        migrations.AddIndex(
            model_name='membership',
            index=models.Index(fields=['usuario', 'empresa'], name='idx_memb_usuario_empresa'),
        ),
        migrations.AlterUniqueTogether(
            name='membership',
            unique_together={('empresa', 'usuario')},
        ),
    ]
